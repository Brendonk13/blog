[{"content":"Some background on VLANs A world without VLANs VLANs can be confusing and seem to be all-powerful, I find it helps to think about why they were needed in the first case: to feasibly scale a network.\nBefore VLANs, each ethernet port on a network switch could only belong to one subnet :'( This meant that a corporation would need many switches in order to have a segmented network.\nIf this doesn\u0026rsquo;t seem valuable or doesn\u0026rsquo;t make sense yet, read the next section instead of re-reading this one.\nA better world (has VLANs) VLANs have many benefits but the one that makes them essential is that they allow switch ports to handle traffic from many different subnetworks/VLANs (called a VLAN if there are multiple networks on one port).\nIn other words, VLANs allow a machine with one ethernet port to host many VM\u0026rsquo;s on many different networks which all share the same port.\nThis was not feasible without VLANs since this machine would need an ethernet port for every different subnet used by the machine (and many switches!!).\nOther VLAN benefits  Security through network isolation Easily, feasibly segregate subnets Helps with sanity (see previous point)  Setup on Cisco SG 250 Preamble Current Network Topology  My laptop is connected to my switch which is connected to my router. I also have a raspberry pi connected to this switch. They are currently on the same network and can communicate with each other. All packets between these two machines are routed via my router.  Goal Network Topology  Laptop and raspberry pi each receive second IP address on to-be-created subnet: 10.0.30.0/24. Traffic on this subnet is routed through layer 3 cisco switch. Traffic on this subnet does not reach the router.  Setup  Access WebUI: https://switch_ip_address\nNote: I found https to be significantly slower than http!   2. Set laptop and raspberry pi ports on switch to trunk mode from access mode\nThis makes the port able to use multiple subnetworks (VLANs). This is because access ports may only use the native VLAN, while trunk ports may use any number of configured VLANs.\n Click: VLAN Management then Interface Settings Click: Edit for each interface the raspberry pi and laptop are connected to.    3. Click: VLAN Management then VLAN Settings then Add  4. Enter VLAN ID and the VLAN name in the popup window.  5. Enable IPV4 routing (Layer 3 functionality)\n Click: IP Configuration -\u0026gt; IPv4 Management and Interfaces Make sure box is checked like in image below    6. Assign default gateway for this VLAN\nFrom same screen as previous step\n Click: Add Set the interface to VLAN 30 Set the IP Address Type to static Define the VLAN subnet and default gateway by entering the IP address of the gateway and the subnet mask.\nNote that it is convention that VLAN XX be on network aa.bb.XX.0/24 or aa.XX.0.0/16.    Testing Give devices IP addresses on new VLAN First I add my raspberry pi to the new VLAN using this guide\n It\u0026rsquo;s IP address is 10.0.30.10  Do the same on laptop according to arch wiki\nsudo ip link add link enp0s20u2u2 name enp0s20u2u2.30 type vlan id 30 sudo ip addr add 10.0.30.20/24 brd 10.0.30.99 dev enp0s20u2u2.30 sudo ip link set dev enp0s20u2u2.30 up  It\u0026rsquo;s IP address is 10.0.30.20  Test the devices can communicate Test laptop can reach raspberry pi:\nping -I enp0s20u2u2.30 10.0.30.10 Test raspberry pi can reach laptop:\nping -I eth0.30 10.0.30.20 Q/A Aren\u0026rsquo;t there plenty of cisco VLAN guides already? Yes there are (strangely less than expected), but the SG 250 doesn\u0026rsquo;t use the same command line interface as most cisco switches, which renders those guides not so helpful.\nI believe that most cisco switches have the same webUI however so this guide may work for other cisco switches.\nWhy can\u0026rsquo;t my devices connect to the internet via the VLAN interface? Because your router does not know where to send the return traffic for the subnetwork: 10.0.30.0/24.\nSolution: Add a static route on your router where all traffic destined for the subnet 10.0.30.0/24 is sent to the default gateway for this VLAN: 10.0.30.99\n","permalink":"https://rm-fr.ca/posts/vlans_cisco_sg250/","summary":"Some background on VLANs A world without VLANs VLANs can be confusing and seem to be all-powerful, I find it helps to think about why they were needed in the first case: to feasibly scale a network.\nBefore VLANs, each ethernet port on a network switch could only belong to one subnet :'( This meant that a corporation would need many switches in order to have a segmented network.\nIf this doesn\u0026rsquo;t seem valuable or doesn\u0026rsquo;t make sense yet, read the next section instead of re-reading this one.","title":"VLAN Setup Guide Cisco SG251"},{"content":"Background Info VPN\u0026rsquo;s in my words The purpose of a VPN server at its heart is to give remote clients a private ip address on some private IP subnet that they cannot access.\nBasically the VPN server can access some subnetworks that you can\u0026rsquo;t access but want to access.\nTo do this the VPN gives you an IP address on your desired subnet which effectively makes you a client on that network with access to most or all (depending on firewall/ACL rules of the default gateway for the subnet) machines on that network.\nThis is accomplished by your local machine sending all traffic destined for the previously inaccessible subnet through the VPN server, which in turn forwards your requests to the appropriate client on the desired subnet!\nWhy wireguard? Number 1 reason is hands down for street cred, people will fear and respect you for using wireguard as long as you constantly announce that you use it (emphasis on constantly). Besides possibly leading to your crush finally acknowledging your existence, wireguard is just amazing: fast to setup, to manage and to ping.\nSetup steps Create keys Run the following commands for every peer\nwg genkey | tee privatekey | wg pubkey \u0026gt; publickey Then set perms so that only the user that created them can read/write them\nsudo chmod 600 *key Allow ip forwarding on VPN server sudo sysctl -w net.ipv4.ip_forward=1 (untested) Note: To make the change permanent, add net.ipv4.ip_forward = 1 to /etc/sysctl.d/99-sysctl.conf.\nCreate config files 1) Create the following files on each machine\nsudoedit /etc/wireguard/wg0.conf  VPN Client's wg0.conf  [Interface] # The IP address that this client will have on the WireGuard network. # Note the /32 means this client can only have one address within the tunnel # Whereas the server has a /24 since it can use any Address = 10.101.0.2/32 # The private key you generated for the client previously. PrivateKey = :) [Peer] # VPN Server\u0026#39;s public key. PublicKey = public ! # The WireGuard server to connect to. # Note: this address must be reachable on the client\u0026#39;s network Endpoint = 192.168.0.20:51821 # The subnets this WireGuard VPN is in control of. # Implication ==\u0026gt; this client\u0026#39;s (client who has this file) ping\u0026#39;s to these subnets will go through this peer\u0026#39;s endpoint instead of another gateway # Implication ==\u0026gt; This client (meaning ^) can access these subnet\u0026#39;s if this wireguard vpn server can access them ! AllowedIPs = 10.101.0.0/24, 10.0.50.0/24 # Ensures that your home router does not kill the tunnel, by sending a ping # every 25 seconds. PersistentKeepalive = 25 \n  VPN Server's wg0.conf   [Interface] # Configuration for the server # Set the IP subnet that will be used for the WireGuard network. Address = 10.101.0.1/24 # The port that will be used to listen to connections. 51820 is the default. ListenPort = 51821 # The output of `wg genkey` for the server. PrivateKey = :) # FROM: https://wiki.archlinux.org/index.php/WireGuard#Server # Apperently (from ^^) if the server is behind a router and receives traffic via NAT, these iptables rules are not needed PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o CHANGE_ME:eth0.50 -j MASQUERADE PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptable s -t nat -D POSTROUTING -o CHANGE_ME:eth0.50 -j MASQUERADE [Peer] # Connecting client\u0026#39;s public key PublicKey = public ! # The IP address that this peer has WITHIN the tunnel AllowedIPs = 10.101.0.2/32 # Ensures that your home router does not kill the tunnel, by sending a ping every 25 seconds. PersistentKeepalive = 25 \n 2) wg-quick up wg0 on both machines and you\u0026rsquo;re done\nQ/A Q: I\u0026rsquo;m confused, I keep hearing the terms clients and servers and peers interchanged but WHO IS WHO ARENT THEY ALL PEERS??  A: Yes they are all peers but we can mimic a client-server model using wireguard which is what is shown here :)  Q: What would I use this dang thing for anyways  A: For example, people who want remote access to some computer in their house might have:   A machine with the servers config file on their private (no open ports) home network (tweaked so this server also has the clients endpoint in its config file) A publicly acessible Amazon EC2 instance with the client configuration.   As long as PersistentKeepalive is set and a connection is established by the \u0026ldquo;server\u0026rdquo; to the EC2 \u0026ldquo;client\u0026rdquo; (established by ping or any communication then PersistentKeepalive makes the connection stay active) then we can connect to the publicly innaccessable \u0026ldquo;server\u0026rdquo; by connecting to the public EC2 \u0026ldquo;client\u0026rdquo; :)  Q: Where can I find further resources for wireguard or VPN\u0026rsquo;s in general  A: The arch wiki is always a great resource, the talk that Jason Donenfeld gave to introduce wireguard provides an interesting not-overly-technical analysis of wireguard. Lastly, the wireguard website has lots of information for those who wish to deep dive into the inner workings of wireguard.  ","permalink":"https://rm-fr.ca/posts/wireguard_vpn/","summary":"Background Info VPN\u0026rsquo;s in my words The purpose of a VPN server at its heart is to give remote clients a private ip address on some private IP subnet that they cannot access.\nBasically the VPN server can access some subnetworks that you can\u0026rsquo;t access but want to access.\nTo do this the VPN gives you an IP address on your desired subnet which effectively makes you a client on that network with access to most or all (depending on firewall/ACL rules of the default gateway for the subnet) machines on that network.","title":"Wireguard vpn setup guide"}]